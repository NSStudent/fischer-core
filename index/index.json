{"includedArchiveIdentifiers":["FischerCore"],"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/iterator\/next()","title":"func next() -> Square?","type":"method"}],"path":"\/documentation\/fischercore\/bitboard\/iterator","title":"Bitboard.Iterator","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/&(_:_:)","title":"static func & (Bitboard, Bitboard) -> Bitboard","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/_(_:_:)-1wjpj","title":"static func > (Bitboard, Bitboard) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/_(_:_:)-6hfz1","title":"static func ^ (Bitboard, Bitboard) -> Bitboard","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/_(_:_:)-70tm7","title":"static func | (Bitboard, Bitboard) -> Bitboard","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/_(_:_:)-7sx10","title":"static func < (Bitboard, Bitboard) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/__(_:_:)-3tn7z","title":"static func >> (Bitboard, Bitboard) -> Bitboard","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/__(_:_:)-9la2e","title":"static func << (Bitboard, Bitboard) -> Bitboard","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/__=(_:_:)-1767j","title":"static func >>= (inout Bitboard, Bitboard)","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/__=(_:_:)-645t0","title":"static func <<= (inout Bitboard, Bitboard)","type":"op"},{"path":"\/documentation\/fischercore\/bitboard\/~(_:)","title":"static func ~ (Bitboard) -> Bitboard","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/init()","title":"init()","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(file:)","title":"init(file: File)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(location:)","title":"init(location: Location)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(locations:)","title":"init<S>(locations: S)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(move:)","title":"init(move: Move)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(rank:)","title":"init(rank: Rank)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(rawvalue:)","title":"init(rawValue: UInt64)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(square:)","title":"init(square: Square)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(squares:)","title":"init<S>(squares: S)","type":"init"},{"path":"\/documentation\/fischercore\/bitboard\/init(startfor:)","title":"init(startFor: Piece)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/ascii","title":"var ascii: String","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/hasmorethanone","title":"var hasMoreThanOne: Bool","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/lsb","title":"var lsb: Bitboard","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/lsbindex","title":"var lsbIndex: Int?","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/lsbsquare","title":"var lsbSquare: Square?","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/msb","title":"var msb: Bitboard","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/msbindex","title":"var msbIndex: Int?","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/msbsquare","title":"var msbSquare: Square?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/contains(_:)","title":"func contains(Square) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/fill(toward:stoppers:)","title":"func fill(toward: Bitboard.ShiftDirection, stoppers: Bitboard)","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/filled(toward:stoppers:)","title":"func filled(toward: Bitboard.ShiftDirection, stoppers: Bitboard) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/fliphorizontally()","title":"func flipHorizontally()","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flipvertically()","title":"func flipVertically()","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flippedhorizontally()","title":"func flippedHorizontally() -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flippedvertically()","title":"func flippedVertically() -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/intersects(_:)","title":"func intersects(Bitboard) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/poplsb()","title":"func popLSB() -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/poplsbindex()","title":"func popLSBIndex() -> Int?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/poplsbsquare()","title":"func popLSBSquare() -> Square?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/popmsb()","title":"func popMSB() -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/popmsbindex()","title":"func popMSBIndex() -> Int?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/popmsbsquare()","title":"func popMSBSquare() -> Square?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/ranks()","title":"func ranks() -> [UInt8]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/shift(toward:)","title":"func shift(toward: Bitboard.ShiftDirection)","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/shifted(toward:)","title":"func shifted(toward: Bitboard.ShiftDirection) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/swap(_:_:)","title":"func swap(Square, Square)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/subscript(_:)-8nqmq","title":"subscript(Square) -> Bool","type":"subscript"},{"path":"\/documentation\/fischercore\/bitboard\/subscript(_:)-vg0t","title":"subscript(Location) -> Bool","type":"subscript"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/allzeros","title":"static let allZeros: Bitboard","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/edges","title":"static let edges: Bitboard","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/east","title":"case east","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/north","title":"case north","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/northeast","title":"case northeast","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/northwest","title":"case northwest","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/south","title":"case south","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/southeast","title":"case southeast","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/southwest","title":"case southwest","type":"case"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/west","title":"case west","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/bitboard\/shiftdirection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/bitboard\/shiftdirection","title":"Bitboard.ShiftDirection","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/bitboard\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/init(integerliteral:)","title":"init(integerLiteral: UInt64)","type":"init"}],"path":"\/documentation\/fischercore\/bitboard\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/filter(_:)-162tj","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/filter(_:)-4u4qp","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flatmap(_:)-1pwv5","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flatmap(_:)-8ayv3","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/makeiterator()","title":"func makeIterator() -> Bitboard.Iterator","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/map(_:)","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/moves(from:)","title":"func moves(from: Square) -> [Move]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/moves(to:)","title":"func moves(to: Square) -> [Move]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/sorted(using:)-11n7h","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/sorted(using:)-9swrd","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/fischercore\/bitboard\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/fischercore\/bitboard\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/bitboard\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/filter(_:)-162tj","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/filter(_:)-4u4qp","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flatmap(_:)-1pwv5","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/flatmap(_:)-8ayv3","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/makeiterator()","title":"func makeIterator() -> Bitboard.Iterator","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/map(_:)","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/moves(from:)","title":"func moves(from: Square) -> [Move]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/moves(to:)","title":"func moves(to: Square) -> [Move]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/sorted(using:)-11n7h","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/sorted(using:)-9swrd","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/bitboard\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/fischercore\/bitboard\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/bitboard","title":"Bitboard","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/iterator\/next()","title":"func next() -> Board.Space?","type":"method"}],"path":"\/documentation\/fischercore\/board\/iterator","title":"Board.Iterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/space\/init(piece:location:)","title":"init(piece: Piece?, location: Location)","type":"init"},{"path":"\/documentation\/fischercore\/board\/space\/init(piece:square:)","title":"init(piece: Piece?, square: Square)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/space\/file","title":"var file: File","type":"property"},{"path":"\/documentation\/fischercore\/board\/space\/piece","title":"var piece: Piece?","type":"property"},{"path":"\/documentation\/fischercore\/board\/space\/rank","title":"var rank: Rank","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/space\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/board\/space\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/board\/space","title":"Board.Space","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/init()","title":"init()","type":"init"},{"path":"\/documentation\/fischercore\/board\/init(fen:)","title":"init?(fen: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/blackpieces","title":"var blackPieces: [Piece]","type":"property"},{"path":"\/documentation\/fischercore\/board\/emptyspaces","title":"var emptySpaces: Bitboard","type":"property"},{"path":"\/documentation\/fischercore\/board\/occupiedspaces","title":"var occupiedSpaces: Bitboard","type":"property"},{"path":"\/documentation\/fischercore\/board\/pieces","title":"var pieces: [Piece]","type":"property"},{"path":"\/documentation\/fischercore\/board\/whitepieces","title":"var whitePieces: [Piece]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/ascii()","title":"func ascii() -> String","type":"method"},{"path":"\/documentation\/fischercore\/board\/attackers(to:color:)","title":"func attackers(to: Square, color: PlayerColor) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/board\/attackerstoking(for:)","title":"func attackersToKing(for: PlayerColor) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/board\/bitboard(for:)-3zdqz","title":"func bitboard(for: PlayerColor) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/board\/bitboard(for:)-71o08","title":"func bitboard(for: Piece) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/board\/count(of:)","title":"func count(of: Piece) -> Int","type":"method"},{"path":"\/documentation\/fischercore\/board\/fen()","title":"func fen() -> String","type":"method"},{"path":"\/documentation\/fischercore\/board\/pinned(for:)","title":"func pinned(for: PlayerColor) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/board\/space(at:)-5688o","title":"func space(at: Square) -> Board.Space","type":"method"},{"path":"\/documentation\/fischercore\/board\/space(at:)-9eawm","title":"func space(at: Location) -> Board.Space","type":"method"},{"path":"\/documentation\/fischercore\/board\/spaces(at:)","title":"func spaces(at: Rank) -> [Board.Space]","type":"method"},{"path":"\/documentation\/fischercore\/board\/squareforking(for:)","title":"func squareForKing(for: PlayerColor) -> Square?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/subscript(_:)-1bnls","title":"subscript(Square) -> Piece?","type":"subscript"},{"path":"\/documentation\/fischercore\/board\/subscript(_:)-6pvo","title":"subscript(Location) -> Piece?","type":"subscript"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/side\/kingside","title":"case kingside","type":"case"},{"path":"\/documentation\/fischercore\/board\/side\/queenside","title":"case queenside","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/side\/iskingside","title":"var isKingside: Bool","type":"property"},{"path":"\/documentation\/fischercore\/board\/side\/isqueenside","title":"var isQueenside: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/side\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/board\/side\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/board\/side","title":"Board.Side","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/board\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/board\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/fischercore\/board\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/fischercore\/board\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/board\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/board\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/fischercore\/board\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/fischercore\/board\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/board\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/board\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/board\/filter(_:)-12z20","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/filter(_:)-cuht","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/board\/flatmap(_:)-190nl","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/board\/flatmap(_:)-2mkjg","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/fischercore\/board\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/fischercore\/board\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/makeiterator()","title":"func makeIterator() -> Board.Iterator","type":"method"},{"path":"\/documentation\/fischercore\/board\/map(_:)","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/fischercore\/board\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/board\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/board\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/board\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/board\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/board\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/sorted(using:)-1frwt","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/sorted(using:)-z1v5","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/board\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/board\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/board\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/board\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/fischercore\/board\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/board","title":"Board","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/iterator\/next()","title":"func next() -> CastlingRights.Right?","type":"method"}],"path":"\/documentation\/fischercore\/castlingrights\/iterator","title":"CastlingRights.Iterator","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/init()","title":"init()","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/init(_:)-3ypyf","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/init(color:)","title":"init(color: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/init(side:)","title":"init(side: Board.Side)","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/init(string:)","title":"init?(string: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/description","title":"var description: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/all","title":"static let all: CastlingRights","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/black","title":"static let black: CastlingRights","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/kingside","title":"static let kingside: CastlingRights","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/queenside","title":"static let queenside: CastlingRights","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/white","title":"static let white: CastlingRights","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/blackkingside","title":"case blackKingside","type":"case"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/blackqueenside","title":"case blackQueenside","type":"case"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/whitekingside","title":"case whiteKingside","type":"case"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/whitequeenside","title":"case whiteQueenside","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/init(color:side:)","title":"init(color: PlayerColor, side: Board.Side)","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/init(string:)","title":"init?(string: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/castlesquare","title":"var castleSquare: Square","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/emptysquares","title":"var emptySquares: Bitboard","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/side","title":"var side: Board.Side","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/black","title":"static let black: [CastlingRights.Right]","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/kingside","title":"static let kingside: [CastlingRights.Right]","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/queenside","title":"static let queenside: [CastlingRights.Right]","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/white","title":"static let white: [CastlingRights.Right]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/castlingrights\/right\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/right\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/castlingrights\/right\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/castlingrights\/right","title":"CastlingRights.Right","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/castlingrights\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/fischercore\/castlingrights\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/filter(_:)-4buso","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/filter(_:)-67n4z","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/flatmap(_:)-3uour","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/flatmap(_:)-8xgrp","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/makeiterator()","title":"func makeIterator() -> CastlingRights.Iterator","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/map(_:)","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/sorted(using:)-53e0d","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/sorted(using:)-mbu0","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/fischercore\/castlingrights\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/init(_:)-2y6v2","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/fischercore\/castlingrights\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/castlingrights\/contains(_:)","title":"func contains(CastlingRights.Right) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/formintersection(_:)","title":"func formIntersection(CastlingRights)","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(CastlingRights)","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/formunion(_:)","title":"func formUnion(CastlingRights)","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/insert(_:)","title":"func insert(CastlingRights.Right) -> (inserted: Bool, memberAfterInsert: CastlingRights.Right)","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/intersection(_:)","title":"func intersection(CastlingRights) -> CastlingRights","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/isdisjoint(with:)","title":"func isDisjoint(with: CastlingRights) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/issubset(of:)","title":"func isSubset(of: CastlingRights) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/issuperset(of:)","title":"func isSuperset(of: CastlingRights) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/remove(_:)","title":"func remove(CastlingRights.Right) -> CastlingRights.Right?","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/subtract(_:)-5bf1k","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/subtract(_:)-8ucze","title":"func subtract(CastlingRights)","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/subtracting(_:)","title":"func subtracting(CastlingRights) -> CastlingRights","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/symmetricdifference(_:)","title":"func symmetricDifference(CastlingRights) -> CastlingRights","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/union(_:)","title":"func union(CastlingRights) -> CastlingRights","type":"method"},{"path":"\/documentation\/fischercore\/castlingrights\/update(with:)","title":"func update(with: CastlingRights.Right) -> CastlingRights.Right?","type":"method"}],"path":"\/documentation\/fischercore\/castlingrights\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/castlingrights","title":"CastlingRights","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/gametoken\/token","title":"var token: [String]","type":"property"}],"path":"\/documentation\/fischercore\/game\/gametoken","title":"Game.GameToken","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/init(position:whiteplayer:blackplayer:variant:)","title":"init(position: Position, whitePlayer: String, blackPlayer: String, variant: Variant) throws","type":"init"},{"path":"\/documentation\/fischercore\/game\/init(whiteplayer:blackplayer:)","title":"init(whitePlayer: String, blackPlayer: String)","type":"init"},{"path":"\/documentation\/fischercore\/game\/init(with:whiteplayer:blackplayer:variant:)","title":"init(with: String, whitePlayer: String, blackPlayer: String, variant: Variant) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/blackplayer","title":"var blackPlayer: String","type":"property"},{"path":"\/documentation\/fischercore\/game\/board","title":"var board: Board","type":"property"},{"path":"\/documentation\/fischercore\/game\/captureforlastmove","title":"var captureForLastMove: Piece?","type":"property"},{"path":"\/documentation\/fischercore\/game\/castlingrights","title":"var castlingRights: CastlingRights","type":"property"},{"path":"\/documentation\/fischercore\/game\/enpassanttarget","title":"var enPassantTarget: Square?","type":"property"},{"path":"\/documentation\/fischercore\/game\/fullmoves","title":"var fullmoves: UInt","type":"property"},{"path":"\/documentation\/fischercore\/game\/halfmoves","title":"var halfmoves: UInt","type":"property"},{"path":"\/documentation\/fischercore\/game\/isfinished","title":"var isFinished: Bool","type":"property"},{"path":"\/documentation\/fischercore\/game\/kingischecked","title":"var kingIsChecked: Bool","type":"property"},{"path":"\/documentation\/fischercore\/game\/kingisdoublechecked","title":"var kingIsDoubleChecked: Bool","type":"property"},{"path":"\/documentation\/fischercore\/game\/movecount","title":"var moveCount: Int","type":"property"},{"path":"\/documentation\/fischercore\/game\/movehistory","title":"var moveHistory: [(move: Move, piece: Piece, capture: Piece?, enPassantTarget: Square?, kingAttackers: Bitboard, halfmoves: UInt, rights: CastlingRights)]","type":"property"},{"path":"\/documentation\/fischercore\/game\/playedmoves","title":"var playedMoves: [Move]","type":"property"},{"path":"\/documentation\/fischercore\/game\/playerturn","title":"var playerTurn: PlayerColor","type":"property"},{"path":"\/documentation\/fischercore\/game\/position","title":"var position: Position","type":"property"},{"path":"\/documentation\/fischercore\/game\/token","title":"var token: Game.GameToken","type":"property"},{"path":"\/documentation\/fischercore\/game\/variant","title":"let variant: Variant","type":"property"},{"path":"\/documentation\/fischercore\/game\/whiteplayer","title":"var whitePlayer: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/availablemoves()","title":"func availableMoves() -> [Move]","type":"method"},{"path":"\/documentation\/fischercore\/game\/copy()","title":"func copy() -> Game","type":"method"},{"path":"\/documentation\/fischercore\/game\/execute(move:)","title":"func execute(move: Move) throws","type":"method"},{"path":"\/documentation\/fischercore\/game\/execute(move:promotion:)-23c3i","title":"func execute(move: Move, promotion: () -> Piece.Kind) throws","type":"method"},{"path":"\/documentation\/fischercore\/game\/execute(move:promotion:)-89p25","title":"func execute(move: Move, promotion: Piece.Kind) throws","type":"method"},{"path":"\/documentation\/fischercore\/game\/execute(uncheckedmove:promotion:)","title":"func execute(uncheckedMove: Move, promotion: () -> Piece.Kind) throws","type":"method"},{"path":"\/documentation\/fischercore\/game\/islegal(move:)","title":"func isLegal(move: Move) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/game\/movesbitboardforpiece(at:)","title":"func movesBitboardForPiece(at: Square) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/game\/sanmove(from:)","title":"func sanMove(from: String) throws -> SANMove","type":"method"},{"path":"\/documentation\/fischercore\/game\/sanmovelist(from:)","title":"func sanMoveList(from: [String]) throws -> [SANMove]","type":"method"},{"path":"\/documentation\/fischercore\/game\/sanrepresentation()","title":"func sanRepresentation() -> String","type":"method"},{"path":"\/documentation\/fischercore\/game\/undomove()","title":"func undoMove() -> Move?","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/executionerror\/illegalmove(_:_:_:)","title":"case illegalMove(Move, PlayerColor, Board)","type":"case"},{"path":"\/documentation\/fischercore\/game\/executionerror\/invalidpromotion(_:)","title":"case invalidPromotion(Piece.Kind)","type":"case"},{"path":"\/documentation\/fischercore\/game\/executionerror\/missingpiece(_:)","title":"case missingPiece(Square)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/executionerror\/message","title":"var message: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/game\/executionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/fischercore\/game\/executionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/game\/executionerror","title":"Game.ExecutionError","type":"enum"}],"path":"\/documentation\/fischercore\/game","title":"Game","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/move\/init(castle:direction:)","title":"init(castle: PlayerColor, direction: File.Direction)","type":"init"},{"path":"\/documentation\/fischercore\/move\/init(game:sanmove:)","title":"init(game: Game, sanMove: SANMove) throws","type":"init"},{"path":"\/documentation\/fischercore\/move\/init(start:end:)","title":"init(start: Location, end: Location)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/move\/end","title":"var end: Square","type":"property"},{"path":"\/documentation\/fischercore\/move\/filechange","title":"var fileChange: Int","type":"property"},{"path":"\/documentation\/fischercore\/move\/filedirection","title":"var fileDirection: File.Direction?","type":"property"},{"path":"\/documentation\/fischercore\/move\/isaxial","title":"var isAxial: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/ischange","title":"var isChange: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isdiagonal","title":"var isDiagonal: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isdownward","title":"var isDownward: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/ishorizontal","title":"var isHorizontal: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isknightjump","title":"var isKnightJump: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isleftward","title":"var isLeftward: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isrightward","title":"var isRightward: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isupward","title":"var isUpward: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/isvertical","title":"var isVertical: Bool","type":"property"},{"path":"\/documentation\/fischercore\/move\/rankchange","title":"var rankChange: Int","type":"property"},{"path":"\/documentation\/fischercore\/move\/rankdirection","title":"var rankDirection: Rank.Direction?","type":"property"},{"path":"\/documentation\/fischercore\/move\/start","title":"var start: Square","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/move\/iscastle(for:)","title":"func isCastle(for: PlayerColor?) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/move\/islongcastle(for:)","title":"func isLongCastle(for: PlayerColor?) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/move\/isshortcastle(for:)","title":"func isShortCastle(for: PlayerColor?) -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/move\/reversed()","title":"func reversed() -> Move","type":"method"},{"path":"\/documentation\/fischercore\/move\/rotated()","title":"func rotated() -> Move","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/move\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/move\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/move\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/move\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/move","title":"Move","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgn\/games","title":"var games: [PGNGame]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgn\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/pgn\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgn","title":"PGN","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnarrow\/color","title":"var color: PGNColor","type":"property"},{"path":"\/documentation\/fischercore\/pgnarrow\/fromsquare","title":"var fromSquare: Square","type":"property"},{"path":"\/documentation\/fischercore\/pgnarrow\/tosquare","title":"var toSquare: Square","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnarrow\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/pgnarrow\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnarrow\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/pgnarrow\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgnarrow","title":"PGNArrow","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnelement\/blackevaluation","title":"let blackEvaluation: [NAG]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/blackmove","title":"let blackMove: SANMove?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/postblackcommentlist","title":"let postBlackCommentList: [PGNComment]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/postblackvariation","title":"let postBlackVariation: [[PGNElement]]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/postwhitecommentlist","title":"let postWhiteCommentList: [PGNComment]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/postwhitevariation","title":"let postWhiteVariation: [[PGNElement]]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/previousblackcommentlist","title":"let previousBlackCommentList: [PGNComment]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/previouswhitecommentlist","title":"let previousWhiteCommentList: [PGNComment]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/turn","title":"let turn: UInt","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/whiteevaluation","title":"let whiteEvaluation: [NAG]?","type":"property"},{"path":"\/documentation\/fischercore\/pgnelement\/whitemove","title":"let whiteMove: SANMove?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnelement\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/pgnelement\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgnelement","title":"PGNElement","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgngame\/elements","title":"var elements: [PGNElement]","type":"property"},{"path":"\/documentation\/fischercore\/pgngame\/initialcomment","title":"var initialComment: [PGNComment]?","type":"property"},{"path":"\/documentation\/fischercore\/pgngame\/result","title":"var result: PGNOutcome?","type":"property"},{"path":"\/documentation\/fischercore\/pgngame\/tags","title":"var tags: [PGNTag : String]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgngame\/fen()","title":"func fen() -> String?","type":"method"},{"path":"\/documentation\/fischercore\/pgngame\/initialboard()","title":"func initialBoard() -> Board","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgngame\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/pgngame\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgngame","title":"PGNGame","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgngameparser\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgngameparser\/body","title":"var body: some Parser<Substring, PGNGame>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgngameparser\/compactmap(_:)","title":"func compactMap<NewOutput>((Self.Output) -> NewOutput?) -> Parsers.CompactMap<Self, NewOutput>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/erasetoanyparser()","title":"func eraseToAnyParser() -> AnyParser<Self.Input, Self.Output>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Parsers.Filter<Self>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/flatmap(_:)","title":"func flatMap<Input, NewParser>((Self.Output) -> NewParser) -> Parsers.FlatMap<NewParser, Self>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/map(_:)-1s57b","title":"func map<NewOutput>((Self.Output) -> NewOutput) -> Parsers.Map<Self, NewOutput>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/map(_:)-6gkbj","title":"func map<C>(C) -> Parsers.MapConversion<Self, C>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/map(_:)-egna","title":"func map<NewOutput>(() -> NewOutput) -> Parsers.MapConstant<Self, NewOutput>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/parse(_:)","title":"func parse(inout Self.Body.Input) throws -> Self.Body.Output","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/pipe(_:)-1nwl9","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, Downstream>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/pipe(_:)-8n0tg","title":"func pipe<Downstream>(() -> Downstream) -> Parsers.Pipe<Self, ParserBuilder<Self.Input>.SkipSecond<Downstream, Parsers.PipeEnd<Self.Input>>>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/printing(_:)","title":"func printing((Self.Output, inout Self.Input) -> Void) -> Parsers.Print<Self>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/pullback(_:)","title":"func pullback<NewInput>(WritableKeyPath<NewInput, Self.Input>) -> Parsers.Pullback<Self, NewInput>","type":"method"},{"path":"\/documentation\/fischercore\/pgngameparser\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Parsers.ReplaceError<Self>","type":"method"}],"path":"\/documentation\/fischercore\/pgngameparser\/parser-implementations","title":"Parser Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgngameparser","title":"PGNGameParser","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnsquare\/color","title":"var color: PGNColor","type":"property"},{"path":"\/documentation\/fischercore\/pgnsquare\/square","title":"var square: Square","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnsquare\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/pgnsquare\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnsquare\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/pgnsquare\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgnsquare","title":"PGNSquare","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/init(_:)","title":"init?(String)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/init(bishop:)","title":"init(bishop: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/init(king:)","title":"init(king: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/init(knight:)","title":"init(knight: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/init(pawn:)","title":"init(pawn: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/init(queen:)","title":"init(queen: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/init(rook:)","title":"init(rook: PlayerColor)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/bitvalue","title":"var bitValue: Int","type":"property"},{"path":"\/documentation\/fischercore\/piece\/color","title":"var color: PlayerColor","type":"property"},{"path":"\/documentation\/fischercore\/piece\/fenname","title":"var fenName: String","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.property","title":"var kind: Piece.Kind","type":"property"},{"path":"\/documentation\/fischercore\/piece\/specialcharacter","title":"var specialCharacter: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/all","title":"static let all: [Piece]","type":"property"},{"path":"\/documentation\/fischercore\/piece\/blackpieces","title":"static let blackPieces: [Piece]","type":"property"},{"path":"\/documentation\/fischercore\/piece\/whitepieces","title":"static let whitePieces: [Piece]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/nonqueens(for:)","title":"static func nonQueens(for: PlayerColor) -> [Piece]","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/bishop","title":"case bishop","type":"case"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/king","title":"case king","type":"case"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/knight","title":"case knight","type":"case"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/pawn","title":"case pawn","type":"case"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/queen","title":"case queen","type":"case"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/rook","title":"case rook","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/init(_:)","title":"init?(String)","type":"init"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/isbishop","title":"var isBishop: Bool","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/isking","title":"var isKing: Bool","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/isknight","title":"var isKnight: Bool","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/ispawn","title":"var isPawn: Bool","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/isqueen","title":"var isQueen: Bool","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/isrook","title":"var isRook: Bool","type":"property"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/name","title":"var name: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/canpromote()","title":"func canPromote() -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/piece\/kind-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/piece\/kind-swift.enum","title":"Piece.Kind","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/piece\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/piece\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/piece","title":"Piece","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/position\/==(_:_:)","title":"static func == (Position, Position) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/position\/init(board:playerturn:castlingrights:enpassanttarget:halfmoves:fullmoves:)","title":"init(board: Board, playerTurn: PlayerColor, castlingRights: CastlingRights, enPassantTarget: Square?, halfmoves: UInt, fullmoves: UInt)","type":"init"},{"path":"\/documentation\/fischercore\/position\/init(fen:)","title":"init?(fen: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/position\/board","title":"var board: Board","type":"property"},{"path":"\/documentation\/fischercore\/position\/castlingrights","title":"var castlingRights: CastlingRights","type":"property"},{"path":"\/documentation\/fischercore\/position\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/fischercore\/position\/enpassanttarget","title":"var enPassantTarget: Square?","type":"property"},{"path":"\/documentation\/fischercore\/position\/fullmoves","title":"var fullmoves: UInt","type":"property"},{"path":"\/documentation\/fischercore\/position\/halfmoves","title":"var halfmoves: UInt","type":"property"},{"path":"\/documentation\/fischercore\/position\/playerturn","title":"var playerTurn: PlayerColor","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/position\/fen()","title":"func fen() -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/position\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/position\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/position","title":"Position","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/tables\/betweentable","title":"static var betweenTable: [Bitboard]","type":"property"},{"path":"\/documentation\/fischercore\/tables\/blackpawnattacktable","title":"static var blackPawnAttackTable: [Bitboard]","type":"property"},{"path":"\/documentation\/fischercore\/tables\/kingattacktable","title":"static var kingAttackTable: [Bitboard]","type":"property"},{"path":"\/documentation\/fischercore\/tables\/knightattacktable","title":"static var knightAttackTable: [Bitboard]","type":"property"},{"path":"\/documentation\/fischercore\/tables\/linetable","title":"static var lineTable: [Bitboard]","type":"property"},{"path":"\/documentation\/fischercore\/tables\/whitepawnattacktable","title":"static var whitePawnAttackTable: [Bitboard]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/tables\/between(_:_:)","title":"static func between(Square, Square) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/tables\/pawnattacktable(for:)","title":"static func pawnAttackTable(for: PlayerColor) -> [Bitboard]","type":"method"},{"path":"\/documentation\/fischercore\/tables\/triangleindex(_:_:)","title":"static func triangleIndex(Square, Square) -> Int","type":"method"}],"path":"\/documentation\/fischercore\/tables","title":"Tables","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/___(_:_:)-4j0cy","title":"func >>> (Square, Square) -> Move","type":"op"},{"path":"\/documentation\/fischercore\/___(_:_:)-8knlx","title":"func >>> (Location, Location) -> Move","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/location","title":"Location","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"path":"\/documentation\/fischercore\/constants","title":"Constants","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/a","title":"case a","type":"case"},{"path":"\/documentation\/fischercore\/file\/b","title":"case b","type":"case"},{"path":"\/documentation\/fischercore\/file\/c","title":"case c","type":"case"},{"path":"\/documentation\/fischercore\/file\/d","title":"case d","type":"case"},{"path":"\/documentation\/fischercore\/file\/e","title":"case e","type":"case"},{"path":"\/documentation\/fischercore\/file\/f","title":"case f","type":"case"},{"path":"\/documentation\/fischercore\/file\/g","title":"case g","type":"case"},{"path":"\/documentation\/fischercore\/file\/h","title":"case h","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/init(_:)","title":"init?(Character)","type":"init"},{"path":"\/documentation\/fischercore\/file\/init(index:)","title":"init?(index: Int)","type":"init"},{"path":"\/documentation\/fischercore\/file\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/index","title":"var index: Int","type":"property"},{"path":"\/documentation\/fischercore\/file\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/opposite()","title":"func opposite() -> File","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/direction\/left","title":"case left","type":"case"},{"path":"\/documentation\/fischercore\/file\/direction\/right","title":"case right","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/direction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/file\/direction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/file\/direction","title":"File.Direction","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/'...(_:)-6wkqu","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/fischercore\/file\/'...(_:)-9bmnq","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/fischercore\/file\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/fischercore\/file\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/fischercore\/file\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/fischercore\/file\/_(_:_:)-68j7g","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/file\/_(_:_:)-83o74","title":"static func < (File, File) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/file\/_=(_:_:)-5ywnr","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/file\/_=(_:_:)-884mv","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/file\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/file\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/file\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/fischercore\/file\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/fischercore\/file\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/fischercore\/file\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/file\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/file\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/file","title":"File","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/nag\/blackattack","title":"case blackAttack","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackcrushingadvantage","title":"case blackCrushingAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisiveadvantage","title":"case blackDecisiveAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisivecentercontrol","title":"case blackDecisiveCenterControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisivecounterplay","title":"case blackDecisiveCounterplay","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisivekingsidecontrol","title":"case blackDecisiveKingsideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisivequeensidecontrol","title":"case blackDecisiveQueensideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisivespace","title":"case blackDecisiveSpace","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackdecisivetime","title":"case blackDecisiveTime","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodbishopplacement","title":"case blackGoodBishopPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodcoordination","title":"case blackGoodCoordination","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodendgame","title":"case blackGoodEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodkingplacement","title":"case blackGoodKingPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodkingsafety","title":"case blackGoodKingSafety","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodknightplacement","title":"case blackGoodKnightPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodmiddlegame","title":"case blackGoodMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodopening","title":"case blackGoodOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodqueenplacement","title":"case blackGoodQueenPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackgoodrookplacement","title":"case blackGoodRookPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackinitiative","title":"case blackInitiative","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackinsufficientcompensation","title":"case blackInsufficientCompensation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blacklastinginitiative","title":"case blackLastingInitiative","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderateadvantage","title":"case blackModerateAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatecentercontrol","title":"case blackModerateCenterControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatecounterplay","title":"case blackModerateCounterplay","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatekingsidecontrol","title":"case blackModerateKingsideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatequeensidecontrol","title":"case blackModerateQueensideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatespace","title":"case blackModerateSpace","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatetime","title":"case blackModerateTime","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatetimepressure","title":"case blackModerateTimePressure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatelystrongpawnstructure","title":"case blackModeratelyStrongPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmoderatelyweakpawnstructure","title":"case blackModeratelyWeakPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackmorethanadequatecompensation","title":"case blackMoreThanAdequateCompensation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorbishopplacement","title":"case blackPoorBishopPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorcoordination","title":"case blackPoorCoordination","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorendgame","title":"case blackPoorEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorkingplacement","title":"case blackPoorKingPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorkingsafety","title":"case blackPoorKingSafety","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorknightplacement","title":"case blackPoorKnightPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoormiddlegame","title":"case blackPoorMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpooropening","title":"case blackPoorOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorqueenplacement","title":"case blackPoorQueenPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackpoorrookplacement","title":"case blackPoorRookPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackprotectedfirstrank","title":"case blackProtectedFirstRank","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackseveretimepressure","title":"case blackSevereTimePressure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslightadvantage","title":"case blackSlightAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslightcentercontrol","title":"case blackSlightCenterControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslightcounterplay","title":"case blackSlightCounterplay","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslightkingsidecontrol","title":"case blackSlightKingsideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslightqueensidecontrol","title":"case blackSlightQueensideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslightspace","title":"case blackSlightSpace","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackslighttime","title":"case blackSlightTime","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blacksufficientcompensation","title":"case blackSufficientCompensation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverygoodendgame","title":"case blackVeryGoodEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverygoodmiddlegame","title":"case blackVeryGoodMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverygoodopening","title":"case blackVeryGoodOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverypoorendgame","title":"case blackVeryPoorEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverypoormiddlegame","title":"case blackVeryPoorMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverypooropening","title":"case blackVeryPoorOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackverystrongpawnstructure","title":"case blackVeryStrongPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackveryweakpawnstructure","title":"case blackVeryWeakPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackvulnerablefirstrank","title":"case blackVulnerableFirstRank","type":"case"},{"path":"\/documentation\/fischercore\/nag\/blackzugzwang","title":"case blackZugzwang","type":"case"},{"path":"\/documentation\/fischercore\/nag\/drawishposition","title":"case drawishPosition","type":"case"},{"path":"\/documentation\/fischercore\/nag\/equalchancesactive","title":"case equalChancesActive","type":"case"},{"path":"\/documentation\/fischercore\/nag\/equalchancesquiet","title":"case equalChancesQuiet","type":"case"},{"path":"\/documentation\/fischercore\/nag\/forcedmove","title":"case forcedMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/goodmove","title":"case goodMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/nullannotation","title":"case nullAnnotation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/poormove","title":"case poorMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/questionablemove","title":"case questionableMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/singularmove","title":"case singularMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/speculativemove","title":"case speculativeMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/unclearposition","title":"case unclearPosition","type":"case"},{"path":"\/documentation\/fischercore\/nag\/verygoodmove","title":"case veryGoodMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/verypoormove","title":"case veryPoorMove","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteattack","title":"case whiteAttack","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitecrushingadvantage","title":"case whiteCrushingAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisiveadvantage","title":"case whiteDecisiveAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisivecentercontrol","title":"case whiteDecisiveCenterControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisivecounterplay","title":"case whiteDecisiveCounterplay","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisivekingsidecontrol","title":"case whiteDecisiveKingsideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisivequeensidecontrol","title":"case whiteDecisiveQueensideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisivespace","title":"case whiteDecisiveSpace","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitedecisivetime","title":"case whiteDecisiveTime","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodbishopplacement","title":"case whiteGoodBishopPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodcoordination","title":"case whiteGoodCoordination","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodendgame","title":"case whiteGoodEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodkingplacement","title":"case whiteGoodKingPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodkingsafety","title":"case whiteGoodKingSafety","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodknightplacement","title":"case whiteGoodKnightPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodmiddlegame","title":"case whiteGoodMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodopening","title":"case whiteGoodOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodqueenplacement","title":"case whiteGoodQueenPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitegoodrookplacement","title":"case whiteGoodRookPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteinitiative","title":"case whiteInitiative","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteinsufficientcompensation","title":"case whiteInsufficientCompensation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitelastinginitiative","title":"case whiteLastingInitiative","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderateadvantage","title":"case whiteModerateAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatecentercontrol","title":"case whiteModerateCenterControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatecounterplay","title":"case whiteModerateCounterplay","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatekingsidecontrol","title":"case whiteModerateKingsideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatequeensidecontrol","title":"case whiteModerateQueensideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatespace","title":"case whiteModerateSpace","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatetime","title":"case whiteModerateTime","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatetimepressure","title":"case whiteModerateTimePressure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatelystrongpawnstructure","title":"case whiteModeratelyStrongPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemoderatelyweakpawnstructure","title":"case whiteModeratelyWeakPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitemorethanadequatecompensation","title":"case whiteMoreThanAdequateCompensation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorbishopplacement","title":"case whitePoorBishopPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorcoordination","title":"case whitePoorCoordination","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorendgame","title":"case whitePoorEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorkingplacement","title":"case whitePoorKingPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorkingsafety","title":"case whitePoorKingSafety","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorknightplacement","title":"case whitePoorKnightPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoormiddlegame","title":"case whitePoorMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepooropening","title":"case whitePoorOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorqueenplacement","title":"case whitePoorQueenPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitepoorrookplacement","title":"case whitePoorRookPlacement","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteprotectedfirstrank","title":"case whiteProtectedFirstRank","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteseveretimepressure","title":"case whiteSevereTimePressure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslightadvantage","title":"case whiteSlightAdvantage","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslightcentercontrol","title":"case whiteSlightCenterControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslightcounterplay","title":"case whiteSlightCounterplay","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslightkingsidecontrol","title":"case whiteSlightKingsideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslightqueensidecontrol","title":"case whiteSlightQueensideControl","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslightspace","title":"case whiteSlightSpace","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteslighttime","title":"case whiteSlightTime","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitesufficientcompensation","title":"case whiteSufficientCompensation","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverygoodendgame","title":"case whiteVeryGoodEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverygoodmiddlegame","title":"case whiteVeryGoodMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverygoodopening","title":"case whiteVeryGoodOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverypoorendgame","title":"case whiteVeryPoorEndgame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverypoormiddlegame","title":"case whiteVeryPoorMiddlegame","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverypooropening","title":"case whiteVeryPoorOpening","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteverystrongpawnstructure","title":"case whiteVeryStrongPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whiteveryweakpawnstructure","title":"case whiteVeryWeakPawnStructure","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitevulnerablefirstrank","title":"case whiteVulnerableFirstRank","type":"case"},{"path":"\/documentation\/fischercore\/nag\/whitezugzwang","title":"case whiteZugzwang","type":"case"},{"path":"\/documentation\/fischercore\/nag\/worstmove","title":"case worstMove","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/nag\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/nag\/symbol","title":"var symbol: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/nag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/nag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/nag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/nag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/nag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/nag","title":"NAG","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/outcome\/draw","title":"case draw","type":"case"},{"path":"\/documentation\/fischercore\/outcome\/win(_:)","title":"case win(PlayerColor)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/outcome\/init(_:)","title":"init?(String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/outcome\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/fischercore\/outcome\/isdraw","title":"var isDraw: Bool","type":"property"},{"path":"\/documentation\/fischercore\/outcome\/iswin","title":"var isWin: Bool","type":"property"},{"path":"\/documentation\/fischercore\/outcome\/wincolor","title":"var winColor: PlayerColor?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/outcome\/value(for:)","title":"func value(for: PlayerColor) -> Double","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/outcome\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/outcome\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/outcome","title":"Outcome","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncolor\/blue","title":"case blue","type":"case"},{"path":"\/documentation\/fischercore\/pgncolor\/cyan","title":"case cyan","type":"case"},{"path":"\/documentation\/fischercore\/pgncolor\/green","title":"case green","type":"case"},{"path":"\/documentation\/fischercore\/pgncolor\/magenta","title":"case magenta","type":"case"},{"path":"\/documentation\/fischercore\/pgncolor\/red","title":"case red","type":"case"},{"path":"\/documentation\/fischercore\/pgncolor\/yellow","title":"case yellow","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncolor\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncolor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/pgncolor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncolor\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncolor\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/pgncolor\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgncolor","title":"PGNColor","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncomment\/arrowlist(_:)","title":"case arrowList([PGNArrow])","type":"case"},{"path":"\/documentation\/fischercore\/pgncomment\/squarelist(_:)","title":"case squareList([PGNSquare])","type":"case"},{"path":"\/documentation\/fischercore\/pgncomment\/text(_:)","title":"case text(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncomment\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/pgncomment\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgncomment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/pgncomment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgncomment","title":"PGNComment","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnoutcome\/draw","title":"case draw","type":"case"},{"path":"\/documentation\/fischercore\/pgnoutcome\/loss","title":"case loss","type":"case"},{"path":"\/documentation\/fischercore\/pgnoutcome\/undefined","title":"case undefined","type":"case"},{"path":"\/documentation\/fischercore\/pgnoutcome\/win","title":"case win","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnoutcome\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnoutcome\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/pgnoutcome\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnoutcome\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgnoutcome\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/pgnoutcome\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgnoutcome","title":"PGNOutcome","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgntag\/utcdate","title":"case UTCDate","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/annotator","title":"case annotator","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/black","title":"case black","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackcountry","title":"case blackCountry","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackelo","title":"case blackElo","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackfideid","title":"case blackFideId","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackna","title":"case blackNA","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackratingdiff","title":"case blackRatingDiff","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blacktitle","title":"case blackTitle","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blacktype","title":"case blackType","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackuscf","title":"case blackUSCF","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/blackurl","title":"case blackUrl","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/board","title":"case board","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/chaptername","title":"case chapterName","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/currentposition","title":"case currentPosition","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/date","title":"case date","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/eco","title":"case eco","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/ecourl","title":"case ecoUrl","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/enddate","title":"case endDate","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/endtime","title":"case endTime","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/event","title":"case event","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/eventdate","title":"case eventDate","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/eventsponsor","title":"case eventSponsor","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/fen","title":"case fen","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/link","title":"case link","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/mode","title":"case mode","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/nic","title":"case nic","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/opening","title":"case opening","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/plycount","title":"case plyCount","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/result","title":"case result","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/round","title":"case round","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/section","title":"case section","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/setup","title":"case setUp","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/site","title":"case site","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/stage","title":"case stage","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/starttime","title":"case startTime","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/studyname","title":"case studyName","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/subvariation","title":"case subVariation","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/termination","title":"case termination","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/time","title":"case time","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/timecontrol","title":"case timeControl","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/timezone","title":"case timeZone","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/utctime","title":"case utcTime","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/variant","title":"case variant","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/variation","title":"case variation","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/white","title":"case white","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whitecountry","title":"case whiteCountry","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whiteelo","title":"case whiteElo","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whitefideid","title":"case whiteFideId","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whitena","title":"case whiteNA","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whiteratingdiff","title":"case whiteRatingDiff","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whitetitle","title":"case whiteTitle","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whitetype","title":"case whiteType","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whiteuscf","title":"case whiteUSCF","type":"case"},{"path":"\/documentation\/fischercore\/pgntag\/whiteurl","title":"case whiteUrl","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgntag\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgntag\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/pgntag\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgntag\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/pgntag\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/pgntag\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/pgntag","title":"PGNTag","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/black","title":"case black","type":"case"},{"path":"\/documentation\/fischercore\/playercolor\/white","title":"case white","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/fischercore\/playercolor\/init(string:)","title":"init?(string: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/inverse()","title":"func inverse() -> PlayerColor","type":"method"},{"path":"\/documentation\/fischercore\/playercolor\/invert()","title":"func invert()","type":"method"},{"path":"\/documentation\/fischercore\/playercolor\/isblack()","title":"func isBlack() -> Bool","type":"method"},{"path":"\/documentation\/fischercore\/playercolor\/iswhite()","title":"func isWhite() -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/playercolor\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/playercolor\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/fischercore\/playercolor\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/playercolor\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/playercolor","title":"PlayerColor","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/positionerror\/fenmalformed","title":"case fenMalformed","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/missingenpassantpawn(_:)","title":"case missingEnPassantPawn(Square)","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/missingking(_:)","title":"case missingKing(CastlingRights.Right)","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/missingrook(_:)","title":"case missingRook(CastlingRights.Right)","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/nonemptyenpassantsquare(_:_:)","title":"case nonEmptyEnPassantSquare(Square, Piece)","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/nonemptyenpassanttarget(_:_:)","title":"case nonEmptyEnPassantTarget(Square, Piece)","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/wrongenpassanttargetrank(_:)","title":"case wrongEnPassantTargetRank(Rank)","type":"case"},{"path":"\/documentation\/fischercore\/positionerror\/wrongkingcount(_:)","title":"case wrongKingCount(PlayerColor)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/positionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/fischercore\/positionerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/positionerror","title":"PositionError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/fischercore\/rank\/five","title":"case five","type":"case"},{"path":"\/documentation\/fischercore\/rank\/four","title":"case four","type":"case"},{"path":"\/documentation\/fischercore\/rank\/one","title":"case one","type":"case"},{"path":"\/documentation\/fischercore\/rank\/seven","title":"case seven","type":"case"},{"path":"\/documentation\/fischercore\/rank\/six","title":"case six","type":"case"},{"path":"\/documentation\/fischercore\/rank\/three","title":"case three","type":"case"},{"path":"\/documentation\/fischercore\/rank\/two","title":"case two","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/init(endfor:)","title":"init(endFor: PlayerColor)","type":"init"},{"path":"\/documentation\/fischercore\/rank\/init(index:)","title":"init?(index: Int)","type":"init"},{"path":"\/documentation\/fischercore\/rank\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"path":"\/documentation\/fischercore\/rank\/init(startfor:)","title":"init(startFor: PlayerColor)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/index","title":"var index: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/opposite()","title":"func opposite() -> Rank","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/direction\/down","title":"case down","type":"case"},{"path":"\/documentation\/fischercore\/rank\/direction\/up","title":"case up","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/direction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/rank\/direction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/rank\/direction","title":"Rank.Direction","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/'...(_:)-3lq8m","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/fischercore\/rank\/'...(_:)-9phzg","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/fischercore\/rank\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/fischercore\/rank\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/fischercore\/rank\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/fischercore\/rank\/_(_:_:)-1ube","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/rank\/_(_:_:)-37iqe","title":"static func < (Rank, Rank) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/rank\/_=(_:_:)-1z6b2","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/fischercore\/rank\/_=(_:_:)-2v1hh","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/rank\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/rank\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/rank\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/fischercore\/rank\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/rank\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/rank\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/rank","title":"Rank","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/from","title":"let from: SANMove.FromPosition?","type":"property"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/iscapture","title":"let isCapture: Bool","type":"property"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/ischeck","title":"let isCheck: Bool","type":"property"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/ischeckmate","title":"let isCheckmate: Bool","type":"property"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/piece","title":"let piece: Piece.Kind","type":"property"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/promotionto","title":"let promotionTo: SANMove.PromotionPiece?","type":"property"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/tosquare","title":"let toSquare: Square","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/sanmove\/sandefaultmove","title":"SANMove.SANDefaultMove","type":"struct"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/kingsidecastling","title":"case kingsideCastling","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/queensidecastling","title":"case queensideCastling","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/san(_:)","title":"case san(SANMove.SANDefaultMove)","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/fromposition\/file(_:)","title":"case file(File)","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/fromposition\/rank(_:)","title":"case rank(Rank)","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/fromposition\/square(_:)","title":"case square(Square)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/fromposition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/sanmove\/fromposition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/sanmove\/fromposition","title":"SANMove.FromPosition","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/bishop","title":"case bishop","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/knight","title":"case knight","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/queen","title":"case queen","type":"case"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/rook","title":"case rook","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/kind","title":"var kind: Piece.Kind","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/sanmove\/promotionpiece\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/sanmove\/promotionpiece","title":"SANMove.PromotionPiece","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/sanmove\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/sanmove\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/sanmove\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/sanmove","title":"SANMove","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/a1","title":"case a1","type":"case"},{"path":"\/documentation\/fischercore\/square\/a2","title":"case a2","type":"case"},{"path":"\/documentation\/fischercore\/square\/a3","title":"case a3","type":"case"},{"path":"\/documentation\/fischercore\/square\/a4","title":"case a4","type":"case"},{"path":"\/documentation\/fischercore\/square\/a5","title":"case a5","type":"case"},{"path":"\/documentation\/fischercore\/square\/a6","title":"case a6","type":"case"},{"path":"\/documentation\/fischercore\/square\/a7","title":"case a7","type":"case"},{"path":"\/documentation\/fischercore\/square\/a8","title":"case a8","type":"case"},{"path":"\/documentation\/fischercore\/square\/b1","title":"case b1","type":"case"},{"path":"\/documentation\/fischercore\/square\/b2","title":"case b2","type":"case"},{"path":"\/documentation\/fischercore\/square\/b3","title":"case b3","type":"case"},{"path":"\/documentation\/fischercore\/square\/b4","title":"case b4","type":"case"},{"path":"\/documentation\/fischercore\/square\/b5","title":"case b5","type":"case"},{"path":"\/documentation\/fischercore\/square\/b6","title":"case b6","type":"case"},{"path":"\/documentation\/fischercore\/square\/b7","title":"case b7","type":"case"},{"path":"\/documentation\/fischercore\/square\/b8","title":"case b8","type":"case"},{"path":"\/documentation\/fischercore\/square\/c1","title":"case c1","type":"case"},{"path":"\/documentation\/fischercore\/square\/c2","title":"case c2","type":"case"},{"path":"\/documentation\/fischercore\/square\/c3","title":"case c3","type":"case"},{"path":"\/documentation\/fischercore\/square\/c4","title":"case c4","type":"case"},{"path":"\/documentation\/fischercore\/square\/c5","title":"case c5","type":"case"},{"path":"\/documentation\/fischercore\/square\/c6","title":"case c6","type":"case"},{"path":"\/documentation\/fischercore\/square\/c7","title":"case c7","type":"case"},{"path":"\/documentation\/fischercore\/square\/c8","title":"case c8","type":"case"},{"path":"\/documentation\/fischercore\/square\/d1","title":"case d1","type":"case"},{"path":"\/documentation\/fischercore\/square\/d2","title":"case d2","type":"case"},{"path":"\/documentation\/fischercore\/square\/d3","title":"case d3","type":"case"},{"path":"\/documentation\/fischercore\/square\/d4","title":"case d4","type":"case"},{"path":"\/documentation\/fischercore\/square\/d5","title":"case d5","type":"case"},{"path":"\/documentation\/fischercore\/square\/d6","title":"case d6","type":"case"},{"path":"\/documentation\/fischercore\/square\/d7","title":"case d7","type":"case"},{"path":"\/documentation\/fischercore\/square\/d8","title":"case d8","type":"case"},{"path":"\/documentation\/fischercore\/square\/e1","title":"case e1","type":"case"},{"path":"\/documentation\/fischercore\/square\/e2","title":"case e2","type":"case"},{"path":"\/documentation\/fischercore\/square\/e3","title":"case e3","type":"case"},{"path":"\/documentation\/fischercore\/square\/e4","title":"case e4","type":"case"},{"path":"\/documentation\/fischercore\/square\/e5","title":"case e5","type":"case"},{"path":"\/documentation\/fischercore\/square\/e6","title":"case e6","type":"case"},{"path":"\/documentation\/fischercore\/square\/e7","title":"case e7","type":"case"},{"path":"\/documentation\/fischercore\/square\/e8","title":"case e8","type":"case"},{"path":"\/documentation\/fischercore\/square\/f1","title":"case f1","type":"case"},{"path":"\/documentation\/fischercore\/square\/f2","title":"case f2","type":"case"},{"path":"\/documentation\/fischercore\/square\/f3","title":"case f3","type":"case"},{"path":"\/documentation\/fischercore\/square\/f4","title":"case f4","type":"case"},{"path":"\/documentation\/fischercore\/square\/f5","title":"case f5","type":"case"},{"path":"\/documentation\/fischercore\/square\/f6","title":"case f6","type":"case"},{"path":"\/documentation\/fischercore\/square\/f7","title":"case f7","type":"case"},{"path":"\/documentation\/fischercore\/square\/f8","title":"case f8","type":"case"},{"path":"\/documentation\/fischercore\/square\/g1","title":"case g1","type":"case"},{"path":"\/documentation\/fischercore\/square\/g2","title":"case g2","type":"case"},{"path":"\/documentation\/fischercore\/square\/g3","title":"case g3","type":"case"},{"path":"\/documentation\/fischercore\/square\/g4","title":"case g4","type":"case"},{"path":"\/documentation\/fischercore\/square\/g5","title":"case g5","type":"case"},{"path":"\/documentation\/fischercore\/square\/g6","title":"case g6","type":"case"},{"path":"\/documentation\/fischercore\/square\/g7","title":"case g7","type":"case"},{"path":"\/documentation\/fischercore\/square\/g8","title":"case g8","type":"case"},{"path":"\/documentation\/fischercore\/square\/h1","title":"case h1","type":"case"},{"path":"\/documentation\/fischercore\/square\/h2","title":"case h2","type":"case"},{"path":"\/documentation\/fischercore\/square\/h3","title":"case h3","type":"case"},{"path":"\/documentation\/fischercore\/square\/h4","title":"case h4","type":"case"},{"path":"\/documentation\/fischercore\/square\/h5","title":"case h5","type":"case"},{"path":"\/documentation\/fischercore\/square\/h6","title":"case h6","type":"case"},{"path":"\/documentation\/fischercore\/square\/h7","title":"case h7","type":"case"},{"path":"\/documentation\/fischercore\/square\/h8","title":"case h8","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/init(_:)","title":"init?(String)","type":"init"},{"path":"\/documentation\/fischercore\/square\/init(file:rank:)","title":"init(file: File, rank: Rank)","type":"init"},{"path":"\/documentation\/fischercore\/square\/init(location:)","title":"init(location: Location)","type":"init"},{"path":"\/documentation\/fischercore\/square\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/color-swift.property","title":"var color: Square.Color","type":"property"},{"path":"\/documentation\/fischercore\/square\/file","title":"var file: File","type":"property"},{"path":"\/documentation\/fischercore\/square\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/fischercore\/square\/location","title":"var location: Location","type":"property"},{"path":"\/documentation\/fischercore\/square\/rank","title":"var rank: Rank","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/attacks(for:stoppers:)","title":"func attacks(for: Piece, stoppers: Bitboard) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/square\/between(_:)","title":"func between(Square) -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/square\/kingattacks()","title":"func kingAttacks() -> Bitboard","type":"method"},{"path":"\/documentation\/fischercore\/square\/knightattacks()","title":"func knightAttacks() -> Bitboard","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/color-swift.enum\/dark","title":"case dark","type":"case"},{"path":"\/documentation\/fischercore\/square\/color-swift.enum\/light","title":"case light","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/color-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/square\/color-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/square\/color-swift.enum","title":"Square.Color","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/fischercore\/square\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/square\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/square\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/fischercore\/square\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/square","title":"Square","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fischercore\/variant\/chess960","title":"case chess960","type":"case"},{"path":"\/documentation\/fischercore\/variant\/standard","title":"case standard","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fischercore\/variant\/isstandard","title":"var isStandard: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fischercore\/variant\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fischercore\/variant\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fischercore\/variant","title":"Variant","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fischercore\/swift\/sequence\/moves(from:)","title":"func moves(from: Square) -> [Move]","type":"method"},{"path":"\/documentation\/fischercore\/swift\/sequence\/moves(to:)","title":"func moves(to: Square) -> [Move]","type":"method"}],"path":"\/documentation\/fischercore\/swift\/sequence","title":"Sequence","type":"extension"}],"path":"\/documentation\/fischercore\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/fischercore","title":"FischerCore","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}